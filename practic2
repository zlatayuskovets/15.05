from abc import ABC, abstractmethod

class Hero:
    def __init__(self, experience, lvl):
        self.stats = {
            "HP": 10,
            "MP": 20,
            "SP": 30,
        }
        self.experience=experience
        self.lvl=lvl
    def experience_up(self):
        self.experience +=10
        return self.experience
    def lvl_up(self):
        stats = self.get_stats()
        self.lvl += 1
        stats["HP"] += 60
        stats["MP"] += 74
        stats["SP"] += 25

        return self.lvl,'уровень', stats

    def get_stats(self):
        return self.stats.copy()

    def can(self):
        if Sam.experience >= 10:
            print(Sam.lvl_up())
            achivka.subscribe(nagrada)
            achivka.notify("Ваши навыки улучшены!")
            print(nagrada.achievements)
        return "Так держать!"



class ObservableEngine():
    def __init__(self):
        self.__subscribers = set()

    def subscribe(self, subscriber):
        self.__subscribers.add(subscriber)

    def unsubscribe(self, subscriber):
        self.__subscribers.remove(subscriber)

    def notify(self, message):
        for subscriber in self.__subscribers:
            subscriber.update(message)


class AbstractObserver(ABC):
    @abstractmethod
    def update(self, message):
        pass


class ShortNotificationPrinter(AbstractObserver):
    def __init__(self):
        self.achievements = set()

    def update(self, message):
        self.achievements.add(message)


class FullNotificationPrinter(AbstractObserver):
    def __init__(self):
        self.achievements = list()

    def update(self, message):
        if message not in self.achievements:
            self.achievements.append(message)


achivka = ObservableEngine()
nagrada = FullNotificationPrinter()
Sam = Hero(0,1)
print(Sam.get_stats())
print(Sam.lvl, "- уровень")
print(Sam.can())
print(Sam.experience_up())
print(Sam.lvl, "- уровень")
print(Sam.can())
print(Sam.experience_up())
print(Sam.can())
